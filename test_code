f(1,2)
func f(a, b) { return a + b }
f(-1,2)
if (1+2 >= 3) { z = 3 } else { z = 2 } z
func f(a, b) { return a + b }
func f2(a, b) { if (a > b) { c = a+b } else { c = 0 } return c } # branching
f2(f(1,2),1)
f2(2,1) < f(1,2)
func f2(b, d) { if (a > b) { c = a+b } else { c = 0 } return c }
func f(z, x) { return z + x }

func multiply(a,b) { return a*b } # generic function
var c = [[1,2,3] ,[4,5,6], [7,8,9]]
d = [[1,2],[3,4],[5,6]] # no declaration keyword is allowed
multiply(c,d) # var & var
multiply(c,[1,1,1]) # var & inst
multiply(24.2, 10)  # inst & inst
a = [1,2,4]
a == [1,2,4]

func f(a, b) { return a + b }
func f2(a, b) { if (a > b) { c = a+b } else { c = 0 } return c } # branching
f2(f(1,2),1)
func f(c,d) { return 1 } # function overwrite
info() # customized built-in function