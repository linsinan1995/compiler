# define a variable
var a = 0
b = 0 # no declaration keyword is allowed
info()

# control flow
a = 1
if (a+2 >= 3) {
    z = 3
} else {
    z = 2
}

# define a function
func add_x(a, x) {
    return a + x
}

add_x(1, add_x(0, 5) * add_x(0, 4))

# define a nested function
func bigger(a, b) {
    # if a > b, return a+b, otherwise return 0;
    func cmp(a,b) { return a > b }
    if (cmp(a,b)) {
        c = a + b
    } else {
        c = 0
    }
    return c
}

a = bigger(3,1) # a = 4
println(a, bigger(a, a+1)) # 4, 0


# error handling
no_this_var
no_this_function(1, 2)
func_info("no_this_function")
func_info("add_x")

# generic function
func multiply(a,b) {
    return a*b
}
var c = [
    [1,2,3],
    [4,5,6],
    [7,8,9]
]
d = [[1,2],[3,4],[5,6]]
multiply(c,d) # var & var
multiply(c,[1,1,1]) # var & inst matrix
multiply(24.2, [1,1,1])  # scalar & inst matrix
multiply(24, 2)  # scalar & scalar

a = [1,2,4]
a == [1,2,4]

# customized built-in function
info()

func f(x, y, z) { info() }
f(1,2,3)

# get builtin function list
help()


# customized class
class Add {
    inc = 10
    func add(x) { return inc + x }
    func inner_add(x) { inc = inc + x }
    func wow() { println("WOW") }
}

# initialize an object
Add adder
adder.add(10)

adder.inner_add(10) # modify member variable
adder.inc

Add adder2
adder2.inc # member var in adder2 is not effected

# class overload
class Add {
    inc = 10
    func add(x) { return inc + x }
    func inner_minus(x) { inc = inc - x }
    func moew() { println("MOEW") }
}
Add add_modified
add_modified.wow()
adder.wow()
